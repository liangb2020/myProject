package pers.qxllb.common.util.aes;

import com.alibaba.fastjson.JSON;
import lombok.extern.slf4j.Slf4j;
import org.apache.commons.codec.binary.Base64;

import java.nio.charset.StandardCharsets;

/**
 * 无须保镖帮助类
 *
 * @author
 * @createDate 2019/9/29
 */
@Slf4j
public final class WsgUtil {

    /**
     * 解密
     *
     * @param encodeBody 待加密的body
     * @param compress 是否压缩
     * @return String
     */
    public static String decode(byte[] encodeBody, int compress) {
        // 使用无线保镖解密
        byte[] bodyData ;
        String decodedData = null;

        try {
            if (compress == 1) {
                bodyData = GZipUtil.uncompress(SingDuckEncryption.decrypt(encodeBody));
            } else {
                bodyData = SingDuckEncryption.decrypt(encodeBody);
            }

            if (bodyData != null && bodyData.length > 0) {
                decodedData = new String(bodyData, StandardCharsets.UTF_8);
            }
        } catch (Exception e) {
            log.error("decodeBodyByWsg error: " + e.getMessage(), e);
        }

        return decodedData;
    }

    public static String decode(String body, int compress) {
        return decode(Base64.decodeBase64(body), compress);
    }

    /**
     * 获取加密序列号
     *
     * @param body body
     * @return Integer
     */
    public static Integer resolveSecureNo(String body) {
        return SingDuckEncryption.resolveSecureNo(Base64.decodeBase64(body));
    }


    public static String encode(Integer secureNo, String plainText, int compress) {
        try {
            byte[] cipherServiceTicket;
            if (compress == 1) {
                cipherServiceTicket = SingDuckEncryption.encrypt(GZipUtil.compress(plainText), secureNo);
            } else {
                cipherServiceTicket = SingDuckEncryption.encrypt(plainText.getBytes(), secureNo);
            }

            String base64Str = Base64.encodeBase64String(cipherServiceTicket);
            if (compress == 1) {
                if (log.isDebugEnabled()) {
                    log.debug("encodeBodyByWsg origin size: {}, gzip size: {}, wsg size: {}, base64 size: {}",
                        plainText.length(), GZipUtil.compress(plainText).length, cipherServiceTicket.length,
                        base64Str.length());
                }

            }
            return base64Str;
        } catch (Exception e) {
            log.error("encode failed, " + e.getMessage(), e);
        }

        return null;
    }

    /**
     * 加密
     *
     * @param cipherTokenBytes token
     * @param plainText 待加密的文本
     * @param compress 是否压缩
     * @return String
     */
    public static String encode(byte[] cipherTokenBytes, String plainText, int compress) {
        try {
            // 根据密文获取密钥序号
            int secureNo = SingDuckEncryption.resolveSecureNo(cipherTokenBytes);
            return encode(secureNo, plainText, compress);
        } catch (Exception e) {
            log.error("encode failed, " + e.getMessage(), e);
        }
        return null;
    }

    public static void main(String[] args) {

        StringBuffer sb =   new StringBuffer();
        //request
        sb.append("dTCuZCeRocYM/noX4eDnBXAs6wZIT2pH6W2Wn7wDIIYbp480Tf6LvV8h5gC918GzjY5w6kH987cBo1ncZpPNjv8NBEFf/yG8km8O8y5eZzVr52OGlS/Okc0mR7JAf0k64bmPkX8dWDk+ETI1dTCZuME8xBNZQLjAIXiVpatf7lmmirVlNVOw/XTCBmIskMwEM55qY6p++2Vyf8fda2TIjJl8gj8aYmzSGSSZr0BvBRDp13OEVTL6N3Rxl7Ixn6ghVBplMLGeoadotKpjSRL6+u78hKHliUB+yXe2X2h6UuzK/XC+TF/FeJqtuAW3G3USrxgXCAJSn0qVNh+kPdArZKAFmIx3WxkOhrtqgjaCeZklPTe+FMjlDJQ79MSP8Cu6SVxgYmm+HcMwEJn2aqtVcsE4jUDDGyd69P9M/90Ai7iYktW12LCmccPkZZR2672Z7DKMhVd/hzboXhdmt4D35cD1CYK9m4lUXMmGB4LMVRMCHZAmS30INNOWxy0fco9gpSPUFDmq9p8fru80eI6riqWDPoavwVCw+z+Bl0QGMCy3u1F+091onItNfVnyCiv7fCldI0CIxOgfvYwzeXxbi9RX/JDEAQ1Q32Dn0rdJ6Wzw5vc8RQft2EQ7oehfpxYBg0Y=");
        //response
        //sb.append("");
        byte[] encodeBody = Base64.decodeBase64(sb.toString());
        String bodyDecStr = WsgUtil.decode(encodeBody, 1); //压缩用1，非压缩用0
        System.out.println(bodyDecStr);
        System.out.println(JSON.toJSONString(JSON.parse(bodyDecStr),true));


        System.out.println("ThreadName:"+Thread.currentThread().getName()+",ThreadId:"+Thread.currentThread().getId());

        System.out.println(System.currentTimeMillis());


    }



}
